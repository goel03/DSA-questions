 TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return build(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1);
    }
    
    TreeNode* build(vector<int>& inorder, vector<int>& postorder, int inStart, int inEnd, int postStart, int postEnd) {
        if (inStart > inEnd) return nullptr;
        TreeNode* root = new TreeNode(postorder[postEnd]);
        int index = inStart;
        while (inorder[index] != root->val) index++;
        int leftLen = index - inStart;
        root->left = build(inorder, postorder, inStart, index - 1, postStart, postStart + leftLen - 1);
        root->right = build(inorder, postorder, index + 1, inEnd, postStart + leftLen, postEnd - 1);
        return root;
    }

// TreeNode* bt(vector<int>& inorder,int is,int ie, vector<int>& postorder,int ps,int pe ,unordered_map<int ,int> m)
// {
//   if(ps>pe ||is>ie) return NULL;
//   TreeNode *root =new TreeNode (postorder [pe]);
//   int inroot =m[postorder[pe]];    //inorder root index
//   int nleft=inroot -is;  
//   root->left = bt(inorder,is,inroot-1 ,postorder ,ps,ps+nleft-1,m);
//   root->right =bt(inorder,inroot+1,ie,postorder,ps+nleft,pe-1,m);
//   return root;
// } 


//     TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
//         if(inorder.size()!= postorder.size())
//         return NULL;
//         unordered_map<int,int> m;
//         for(int i=0;i<inorder.size();i++)
//         {
//             m[inorder[i]]=i;
//         }
//         return bt(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,m);
//     }
