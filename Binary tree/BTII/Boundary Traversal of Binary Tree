bool isLeaf(TreeNode<int> *root)
{
    
    return (!root->left && !root->right);
}

void addLeft(TreeNode<int> *root,vector<int>&res)
{
TreeNode <int>*cur= root->left;

while(cur)
{
  if (!isLeaf(cur)) {
    res.push_back(cur->data);
  }
  if (cur->left)
    cur = cur->left;
  else
    cur = cur->right;
}
}
void addLeaf(TreeNode<int> *root,vector<int>&res) {
// inorder
if (isLeaf(root)){
res.push_back(root->data);
return;
}
if(root->left)
addLeaf(root->left ,res);
if(root->right)
addLeaf(root->right,res);
}


void addRight(TreeNode<int> *root,vector<int>&res)
{
TreeNode<int> *cur= root->right;
vector<int>temp;
while(cur)
{
if (!isLeaf(cur)) {
  temp.push_back(cur->data);
}
if (cur->right)
  cur = cur->right;
else
  cur = cur->left;
}

for(int i=temp.size()-1;i>=0;--i)
{
    res.push_back(temp[i]);
}
}


vector<int> traverseBoundary(TreeNode<int> *root)
{
	vector<int> res;
   if( !root) return res;
   if(!isLeaf(root))
   res.push_back(root->data);
   addLeft(root,res);
   addLeaf(root,res);
   addRight(root,res);
}

